#!/usr/bin/env python3
"""
Script de surveillance des annonces Binance
Surveille les nouveaux launchpools et airdrops hodler
Envoie des alertes Telegram et √©vite les doublons
"""

import requests
import json
import os
import re
from datetime import datetime
from urllib.parse import quote_plus

def send_telegram_alert(message):
    """Envoie une alerte Telegram"""
    try:
        # Configuration Telegram (√† adapter avec vos credentials)
        url_telegram = "https://api.telegram.org/bot1142206850:AAHz9Cw6nKxzT6j1Mh1s4kLYSDj7jAZih1c/sendMessage?chat_id=453473151&text="
        
        # Encode le message pour l'URL
        encoded_message = quote_plus(message)
        url_push_telegram = url_telegram + encoded_message
        
        print("ALERT")
        print(f"Envoi du message: {message}")
        
        response = requests.get(url_push_telegram, timeout=30)
        
        if response.status_code == 200:
            print("‚úÖ Message Telegram envoy√© avec succ√®s")
        else:
            print(f"‚ùå Erreur envoi Telegram: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi Telegram: {e}")

def load_seen_articles(filename="seen_articles.txt"):
    """Charge la liste des articles d√©j√† vus"""
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return set(line.strip() for line in f if line.strip())
        return set()
    except Exception as e:
        print(f"‚ùå Erreur lecture fichier: {e}")
        return set()

def save_seen_articles(seen_articles, filename="seen_articles.txt"):
    """Sauvegarde la liste des articles vus"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            for article_id in sorted(seen_articles):
                f.write(f"{article_id}\n")
        print(f"‚úÖ {len(seen_articles)} articles sauvegard√©s")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")

def get_binance_announcements():
    """R√©cup√®re les annonces Binance via l'API officielle"""
    try:
        # Utiliser l'API Binance pour les annonces
        api_url = "https://www.binance.com/bapi/composite/v1/public/cms/article/catalog/list/query"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Content-Type': 'application/json',
            'Origin': 'https://www.binance.com',
            'Referer': 'https://www.binance.com/en/support/announcement/list/48'
        }
        
        # Payload pour l'API
        payload = {
            "catalogId": 48,
            "pageNo": 1,
            "pageSize": 20
        }
        
        print(f"üîç R√©cup√©ration des annonces via API Binance...")
        response = requests.post(api_url, json=payload, headers=headers, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå Erreur HTTP API: {response.status_code}")
            # Fallback vers scraping simple
            return get_binance_announcements_fallback()
        
        data = response.json()
        
        if data.get('code') == '000000' and 'data' in data:
            articles = data['data'].get('articles', [])
            print(f"‚úÖ {len(articles)} articles r√©cup√©r√©s via API")
            return articles
        else:
            print(f"‚ùå Erreur API: {data.get('message', 'Erreur inconnue')}")
            return get_binance_announcements_fallback()
            
    except Exception as e:
        print(f"‚ùå Erreur API: {e}")
        return get_binance_announcements_fallback()

def get_binance_announcements_fallback():
    """M√©thode de fallback pour r√©cup√©rer les annonces"""
    try:
        # Simuler quelques articles pour tester le syst√®me
        print("üîÑ Utilisation du mode fallback (simulation pour test)")
        
        # En mode r√©el, vous pourriez essayer d'autres sources ou m√©thodes
        # Pour le test, on simule des articles
        fake_articles = [
            {
                'id': 'test_001',
                'title': 'Test Article - Not Launchpool',
                'releaseDate': datetime.now().timestamp() * 1000
            },
            {
                'id': 'test_002', 
                'title': 'Binance Launchpool Announces New Token ABC',
                'releaseDate': datetime.now().timestamp() * 1000
            }
        ]
        
        # Retourner une liste vide en production pour √©viter les faux positifs
        return []
        
    except Exception as e:
        print(f"‚ùå Erreur fallback: {e}")
        return []

def check_new_articles():
    """V√©rifie les nouveaux articles et envoie des alertes"""
    print(f"üöÄ D√©marrage du monitoring Binance - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Charger les articles d√©j√† vus
    seen_articles = load_seen_articles()
    print(f"üìö {len(seen_articles)} articles d√©j√† vus")
    
    # R√©cup√©rer les annonces
    articles = get_binance_announcements()
    
    if not articles:
        print("‚ùå Aucune annonce r√©cup√©r√©e")
        return
    
    print(f"üìÑ {len(articles)} articles r√©cup√©r√©s")
    
    new_articles = []
    
    for article in articles:
        # Cr√©er un ID unique pour l'article
        article_id = str(article.get('id', f"unknown_{hash(article.get('title', ''))}"))
        title = article.get('title', '').lower()
        
        # V√©rifier si c'est un nouveau launchpool ou hodler
        is_launchpool = 'binance launchpool' in title
        is_hodler = 'binance hodler' in title
        
        if (is_launchpool or is_hodler) and article_id not in seen_articles:
            new_articles.append(article)
            seen_articles.add(article_id)
            
            # Pr√©parer le message d'alerte
            alert_type = "üöÄ NOUVEAU LAUNCHPOOL" if is_launchpool else "üíé NOUVEAU HODLER AIRDROP"
            message = f"{alert_type} D√âTECT√â!\n\nüì¢ {article.get('title', 'Titre non disponible')}\n\nüîó https://www.binance.com/en/support/announcement/list/48\n\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Envoyer l'alerte
            send_telegram_alert(message)
            
            print(f"üéØ Nouvel article d√©tect√©: {article.get('title', 'Sans titre')}")
    
    # Sauvegarder les articles vus
    save_seen_articles(seen_articles)
    
    if new_articles:
        print(f"‚úÖ {len(new_articles)} nouveau(x) article(s) d√©tect√©(s) et alert√©(s)")
    else:
        print("‚ÑπÔ∏è Aucun nouvel article launchpool/hodler d√©tect√©")
    
    print("=" * 50)

if __name__ == "__main__":
    try:
        check_new_articles()
    except KeyboardInterrupt:
        print("\nüëã Arr√™t du script")
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")